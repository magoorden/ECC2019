uncontrollable cod_er;
uncontrollable cod_ser;
controllable inc_ctr_WSP;
controllable reset_ctr_WSP;
uncontrollable ctr_ge_max_WSP;
uncontrollable ctr_lt_max_WSP;
controllable MER_an_FT;
controllable MER_an_BT;
controllable MER_an_HT;
controllable MER_aus_FT;
controllable MER_aus_BT;
controllable MER_aus_HT;
controllable MVR_an_HT;
controllable MVR_aus_HT;
controllable MVR_an_FT;
controllable MVR_an_BT;
controllable MVR_aus_FT;
controllable MVR_aus_BT;
uncontrollable STZV_FT;
uncontrollable STZV_BT;
controllable MZS_an_HT;
controllable MZS_aus_HT;
controllable time_WSP;
controllable time_FS;
controllable reset_WSP;
controllable reset_FS;
uncontrollable timeout_WSP;
uncontrollable timeout_FS;
uncontrollable tuer_zu_FT;
uncontrollable tuer_zu_BT;
uncontrollable tuer_zu_HT;
uncontrollable tuer_auf_FT;
uncontrollable tuer_auf_BT;
uncontrollable tuer_auf_HT;
controllable time_W_FT;
controllable time_ER_FT;
controllable time_VR_FT;
controllable time_ZS_FT;
controllable reset_FT;
controllable time_W_BT;
controllable time_ER_BT;
controllable time_VR_BT;
controllable time_ZS_BT;
controllable reset_BT;
controllable time_W_HT;
controllable time_ER_HT;
controllable time_VR_HT;
controllable time_ZS_HT;
controllable reset_HT;
uncontrollable timeout_FT;
uncontrollable timeout_BT;
uncontrollable timeout_HT;
uncontrollable zuendung_an;
uncontrollable zuendung_aus;
controllable soft_ER;
controllable soft_SER_FT;
controllable SERFS;
controllable soft_CS;
controllable ER;
controllable SER;
controllable ZS;
controllable TAST;
controllable wsp;
controllable soft_VR;
controllable soft_ZS;
controllable autom_VR;
controllable is_cod_er;
controllable is_cod_ser;
controllable done_ZS;
controllable CS_ok;
uncontrollable CS;
controllable ZSA;
controllable ZSI;
uncontrollable ER_FT;
uncontrollable ER_BT;
uncontrollable ER_HK;
uncontrollable ER_FS;
uncontrollable VR_FT;
uncontrollable VR_BT;
uncontrollable VR_HK;
uncontrollable VR_FS;
uncontrollable TASTVR;
controllable kein_ZS;
controllable start_ER_FT;
controllable stop_ER_FT;
controllable done_ER;
controllable done_SER_FT;
controllable start_VR_FT;
controllable stop_VR_FT;
controllable done_VR;
controllable start_ZS_FT;
controllable stop_ZS_FT;
controllable sync_FT;
controllable async_FT;
controllable start_ER_BT;
controllable stop_ER_BT;
controllable start_VR_BT;
controllable stop_VR_BT;
controllable start_ZS_BT;
controllable stop_ZS_BT;
controllable sync_BT;
controllable async_BT;
controllable start_ER_HT;
controllable stop_ER_HT;
controllable start_VR_HT;
controllable stop_VR_HT;
controllable start_ZS_HT;
controllable stop_ZS_HT;
controllable sync_HT;
controllable async_HT;
plant automaton tklemme_FT:
  location AUF:
    initial;
    edge tuer_zu_FT goto ZU;
  location ZU:
    marked;
    edge tuer_auf_FT goto AUF;
end
plant automaton tklemme_BT:
  location AUF:
    initial;
    edge tuer_zu_BT goto ZU;
  location ZU:
    marked;
    edge tuer_auf_BT goto AUF;
end
plant automaton zuendung:
  location IDLE:
    initial;
    marked;
    edge zuendung_an goto RUN;
  location RUN:
    edge zuendung_aus goto IDLE;
end
plant automaton P1:
  location:
    initial;
    marked;
    edge soft_ER;
end
plant automaton P2:
  location:
    initial;
    marked;
    edge soft_SER_FT;
end
plant automaton P3:
  location:
    initial;
    marked;
    edge SERFS;
end
plant automaton P4:
  location:
    initial;
    marked;
    edge soft_CS;
end
plant automaton P5:
  location:
    initial;
    marked;
    edge ER;
end
plant automaton P6:
  location:
    initial;
    marked;
    edge SER;
end
plant automaton P7:
  location:
    initial;
    marked;
    edge ZS;
end
plant automaton P8:
  location:
    initial;
    marked;
    edge TAST;
end
plant automaton P10:
  location:
    initial;
    marked;
    edge soft_VR;
end
plant automaton P11:
  location:
    initial;
    marked;
    edge soft_ZS;
end
plant automaton P12:
  location:
    initial;
    marked;
    edge autom_VR;
end
plant automaton P15:
  location:
    initial;
    marked;
    edge done_ZS;
end
plant automaton P16:
  location:
    initial;
    marked;
    edge CS_ok;
end
plant automaton P18:
  location:
    initial;
    marked;
    edge ZSA;
end
plant automaton P19:
  location:
    initial;
    marked;
    edge ZSI;
end
plant automaton P29:
  location:
    initial;
    marked;
    edge kein_ZS;
end
plant automaton P32:
  location:
    initial;
    marked;
    edge done_ER;
end
plant automaton P33:
  location:
    initial;
    marked;
    edge done_SER_FT;
end
plant automaton P36:
  location:
    initial;
    marked;
    edge done_VR;
end
supervisor automaton kein_zs:
  location ZU:
    marked;
    edge tuer_auf_FT goto AUF;
    edge ZS;
  location AUF:
    initial;
    edge tuer_zu_FT goto ZU;
    edge kein_ZS;
end
supervisor automaton warten:
  location IDLE:
    initial;
    marked;
    edge soft_ER, soft_SER_FT, soft_VR, soft_ZS, soft_CS goto RUN;
    edge ER, SER, SERFS, ZS, TAST, autom_VR;
  location RUN:
    edge done_ER, done_SER_FT, done_VR, done_ZS, CS_ok goto IDLE;
    edge soft_CS;
end
supervisor automaton zsi:
  location AUS2:
    initial;
    edge zuendung_an goto AN2;
    edge tuer_zu_FT, tuer_zu_BT goto AUS1;
    edge ZSA;
  location AUS1:
    edge zuendung_an goto AN1;
    edge tuer_auf_FT, tuer_auf_BT goto AUS2;
    edge tuer_zu_FT, tuer_zu_BT goto AUS0;
    edge ZSA;
  location AUS0:
    marked;
    edge tuer_auf_FT, tuer_auf_BT goto AUS1;
    edge zuendung_an goto AN0;
    edge ZSA;
  location AN2:
    edge zuendung_aus goto AUS2;
    edge tuer_zu_FT, tuer_zu_BT goto AN1;
    edge ZSI;
  location AN1:
    edge zuendung_aus goto AUS1;
    edge tuer_auf_FT, tuer_auf_BT goto AN2;
    edge tuer_zu_FT, tuer_zu_BT goto AN0;
  location AN0:
    edge tuer_auf_FT, tuer_auf_BT goto AN1;
    edge zuendung_aus goto ZU;
    edge ZSI;
  location ZU:
    edge zuendung_an goto AN0;
    edge tuer_auf_FT, tuer_auf_BT goto AUS1;
    edge ZSI;
end
supervisor automaton sup12:
  alphabet soft_ER, soft_SER_FT, SERFS, soft_CS, ER, SER, ZS, TAST, soft_VR, soft_ZS, autom_VR, done_ZS, CS_ok, ZSA, ZSI, kein_ZS, done_ER, done_SER_FT, done_VR;
  location:
    initial;
    marked;
    edge autom_VR when true;
    edge CS_ok when true;
    edge done_ER when true;
    edge done_SER_FT when true;
    edge done_VR when true;
    edge done_ZS when true;
    edge ER when true;
    edge kein_ZS when true;
    edge SER when true;
    edge SERFS when true;
    edge soft_CS when true;
    edge soft_ER when true;
    edge soft_SER_FT when true;
    edge soft_VR when true;
    edge soft_ZS when true;
    edge TAST when true;
    edge ZS when true;
    edge ZSA when true;
    edge ZSI when true;
end
