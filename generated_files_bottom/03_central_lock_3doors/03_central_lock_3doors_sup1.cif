uncontrollable cod_er;
uncontrollable cod_ser;
controllable inc_ctr_WSP;
controllable reset_ctr_WSP;
uncontrollable ctr_ge_max_WSP;
uncontrollable ctr_lt_max_WSP;
controllable MER_an_FT;
controllable MER_an_BT;
controllable MER_an_HT;
controllable MER_aus_FT;
controllable MER_aus_BT;
controllable MER_aus_HT;
controllable MVR_an_HT;
controllable MVR_aus_HT;
controllable MVR_an_FT;
controllable MVR_an_BT;
controllable MVR_aus_FT;
controllable MVR_aus_BT;
uncontrollable STZV_FT;
uncontrollable STZV_BT;
controllable MZS_an_HT;
controllable MZS_aus_HT;
controllable time_WSP;
controllable time_FS;
controllable reset_WSP;
controllable reset_FS;
uncontrollable timeout_WSP;
uncontrollable timeout_FS;
uncontrollable tuer_zu_FT;
uncontrollable tuer_zu_BT;
uncontrollable tuer_zu_HT;
uncontrollable tuer_auf_FT;
uncontrollable tuer_auf_BT;
uncontrollable tuer_auf_HT;
controllable time_W_FT;
controllable time_ER_FT;
controllable time_VR_FT;
controllable time_ZS_FT;
controllable reset_FT;
controllable time_W_BT;
controllable time_ER_BT;
controllable time_VR_BT;
controllable time_ZS_BT;
controllable reset_BT;
controllable time_W_HT;
controllable time_ER_HT;
controllable time_VR_HT;
controllable time_ZS_HT;
controllable reset_HT;
uncontrollable timeout_FT;
uncontrollable timeout_BT;
uncontrollable timeout_HT;
uncontrollable zuendung_an;
uncontrollable zuendung_aus;
controllable soft_ER;
controllable soft_SER_FT;
controllable SERFS;
controllable soft_CS;
controllable ER;
controllable SER;
controllable ZS;
controllable TAST;
controllable wsp;
controllable soft_VR;
controllable soft_ZS;
controllable autom_VR;
controllable is_cod_er;
controllable is_cod_ser;
controllable done_ZS;
controllable CS_ok;
uncontrollable CS;
controllable ZSA;
controllable ZSI;
uncontrollable ER_FT;
uncontrollable ER_BT;
uncontrollable ER_HK;
uncontrollable ER_FS;
uncontrollable VR_FT;
uncontrollable VR_BT;
uncontrollable VR_HK;
uncontrollable VR_FS;
uncontrollable TASTVR;
controllable kein_ZS;
controllable start_ER_FT;
controllable stop_ER_FT;
controllable done_ER;
controllable done_SER_FT;
controllable start_VR_FT;
controllable stop_VR_FT;
controllable done_VR;
controllable start_ZS_FT;
controllable stop_ZS_FT;
controllable sync_FT;
controllable async_FT;
controllable start_ER_BT;
controllable stop_ER_BT;
controllable start_VR_BT;
controllable stop_VR_BT;
controllable start_ZS_BT;
controllable stop_ZS_BT;
controllable sync_BT;
controllable async_BT;
controllable start_ER_HT;
controllable stop_ER_HT;
controllable start_VR_HT;
controllable stop_VR_HT;
controllable start_ZS_HT;
controllable stop_ZS_HT;
controllable sync_HT;
controllable async_HT;
plant automaton P3:
  location:
    initial;
    marked;
    edge SERFS;
end
plant automaton P4:
  location:
    initial;
    marked;
    edge soft_CS;
end
plant automaton P5:
  location:
    initial;
    marked;
    edge ER;
end
plant automaton P6:
  location:
    initial;
    marked;
    edge SER;
end
plant automaton P7:
  location:
    initial;
    marked;
    edge ZS;
end
plant automaton P8:
  location:
    initial;
    marked;
    edge TAST;
end
plant automaton P9:
  location:
    initial;
    marked;
    edge wsp;
end
plant automaton P16:
  location:
    initial;
    marked;
    edge CS_ok;
end
plant automaton P20:
  location:
    initial;
    marked;
    edge ER_FT;
end
plant automaton P21:
  location:
    initial;
    marked;
    edge ER_BT;
end
plant automaton P22:
  location:
    initial;
    marked;
    edge ER_HK;
end
plant automaton P23:
  location:
    initial;
    marked;
    edge ER_FS;
end
plant automaton P24:
  location:
    initial;
    marked;
    edge VR_FT;
end
plant automaton P25:
  location:
    initial;
    marked;
    edge VR_BT;
end
plant automaton P26:
  location:
    initial;
    marked;
    edge VR_HK;
end
plant automaton P27:
  location:
    initial;
    marked;
    edge VR_FS;
end
plant automaton P28:
  location:
    initial;
    marked;
    edge TASTVR;
end
plant automaton P29:
  location:
    initial;
    marked;
    edge kein_ZS;
end
supervisor automaton eingabe_er:
  location IN:
    initial;
    marked;
    edge ER_BT, ER_HK goto lER;
    edge soft_CS goto C1;
    edge ER_FT;
    edge ER_FS;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge TASTVR;
  location lER:
    edge soft_CS goto C1;
    edge ER_FT, ER_FS, VR_FT, VR_BT, VR_HK, VR_FS, TASTVR, ER, wsp goto IN;
    edge ER_BT;
    edge ER_HK;
  location C1:
    edge ER_FT, ER_BT, ER_HK goto C2;
    edge ER_FS;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge TASTVR;
  location C2:
    edge CS_ok goto IN;
    edge ER_FT;
    edge ER_BT;
    edge ER_HK;
    edge ER_FS;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge TASTVR;
end
supervisor automaton eingabe_fs:
  location IN:
    initial;
    marked;
    edge ER_FS goto Other;
    edge ER_BT;
    edge ER_HK;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge wsp;
    edge soft_CS;
    edge CS_ok;
    edge ER_FT;
    edge TASTVR;
  location Other:
    edge SERFS goto IN;
    edge ER_BT, ER_HK, VR_FT, VR_BT, VR_HK, VR_FS, wsp, soft_CS, CS_ok goto IN;
    edge ER_FT, TASTVR goto IN;
    edge ER_FS;
end
supervisor automaton eingabe_ser:
  location IN:
    initial;
    marked;
    edge ER_FT goto Other;
    edge ER_BT;
    edge ER_HK;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge wsp;
    edge soft_CS;
    edge CS_ok;
    edge TASTVR;
    edge ER_FS;
  location Other:
    edge SER goto IN;
    edge ER_BT, ER_HK, VR_FT, VR_BT, VR_HK, VR_FS, wsp, soft_CS, CS_ok goto IN;
    edge TASTVR, ER_FS goto IN;
    edge ER_FT;
end
supervisor automaton eingabe_vr:
  location IN:
    initial;
    marked;
    edge TASTVR goto Other;
    edge ER_BT;
    edge ER_HK;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
    edge wsp;
    edge soft_CS;
    edge CS_ok;
    edge ER_FS;
    edge ER_FT;
  location Other:
    edge TAST goto IN;
    edge ER_BT, ER_HK, VR_FT, VR_BT, VR_HK, VR_FS, wsp, soft_CS, CS_ok goto IN;
    edge ER_FS, ER_FT goto IN;
    edge TASTVR;
end
supervisor automaton eingabe_zs:
  location IN:
    initial;
    marked;
    edge VR_FT, VR_BT, VR_HK, VR_FS goto VR;
    edge ER_FT;
    edge ER_BT;
    edge ER_HK;
    edge ER_FS;
    edge wsp;
    edge soft_CS;
    edge CS_ok;
    edge TASTVR;
  location VR:
    edge ZS, kein_ZS goto IN;
    edge ER_FT, ER_BT, ER_HK, ER_FS, wsp, soft_CS, CS_ok, TASTVR goto IN;
    edge VR_FT;
    edge VR_BT;
    edge VR_HK;
    edge VR_FS;
end
supervisor automaton keine_wsp:
  location IDLE:
    initial;
    marked;
    edge ER_BT, ER_FS, ER_FT, ER_HK, VR_BT, VR_FS, VR_FT, VR_HK, TASTVR goto WSP;
    edge soft_CS;
  location WSP:
    edge ER, SER, SERFS, TAST, ZS, soft_CS, wsp goto IDLE;
    edge ER_BT;
    edge ER_FS;
    edge ER_FT;
    edge ER_HK;
    edge VR_BT;
    edge VR_FS;
    edge VR_FT;
    edge VR_HK;
    edge TASTVR;
end
supervisor automaton sup1:
  alphabet SERFS, soft_CS, ER, SER, ZS, TAST, wsp, CS_ok, kein_ZS;
  location:
    initial;
    marked;
    edge CS_ok when true;
    edge ER when true;
    edge kein_ZS when true;
    edge SER when true;
    edge SERFS when true;
    edge soft_CS when true;
    edge TAST when true;
    edge wsp when true;
    edge ZS when true;
end
